CREATE TABLE if NOT EXISTS users (
    user_id bigint NOT NULL UNIQUE,
    balance float NOT NULL DEFAULT 0.0,
    PRIMARY KEY (user_id)
);

CREATE TABLE if NOT EXISTS services (
    service_id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    "name" varchar(255) NOT NULL,
    PRIMARY KEY (service_id)
);

CREATE TABLE if NOT EXISTS bills (
    bill_id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    order_id bigint NOT NULL,
    user_id bigint NOT NULL,
    service_id bigint NOT NULL,
    price float NOT NULL,
    status varchar(12) NOT NULL DEFAULT 'PENDING',
    moderate_at timestamp DEFAULT NULL,
    PRIMARY KEY (bill_id),
    CONSTRAINT fk_bill_user FOREIGN KEY (user_id) REFERENCES users(user_id),
    CONSTRAINT fk_bill_service FOREIGN KEY (service_id) REFERENCES services(service_id)
);

CREATE TABLE if NOT EXISTS accounting (
    record_id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    order_id bigint NOT NULL,
    user_id bigint NOT NULL,
    service_id bigint NOT NULL,
    price float NOT NULL,
    created_at timestamp NOT NULL,
    PRIMARY KEY (record_id),
    CONSTRAINT fk_bill_user FOREIGN KEY (user_id) REFERENCES users(user_id),
    CONSTRAINT fk_bill_service FOREIGN KEY (service_id) REFERENCES services(service_id)
);

CREATE TABLE if NOT EXISTS transactions  (
    transaction_id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    user_id bigint NOT NULL,
    price float NOT NULL,
    comment varchar (255) NOT NULL,
    status varchar(12) NOT NULL,
    date timestamp NOT NULL,
    PRIMARY KEY (transaction_id),
    CONSTRAINT fk_transactions_users FOREIGN KEY (user_id) REFERENCES users (user_id)
);

CREATE INDEX if NOT EXISTS idx_tansactions_date
    ON transactions(date);
CREATE INDEX if NOT EXISTS idx_tansactions_price
    ON transactions(price);

CREATE VIEW bill as
    SELECT b.bill_id, b.order_id, b.price, b.status, b.moderate_at,
       (SELECT u.user_id FROM users as u WHERE u.user_id = b.user_id LIMIT 1),
       (SELECT u.balance FROM users as u WHERE u.user_id = b.user_id LIMIT 1),
       (SELECT s.service_id FROM services as s WHERE b.service_id = s.service_id LIMIT 1),
           (SELECT s.name FROM services as s WHERE b.service_id = s.service_id LIMIT 1)
    FROM bills as b;

CREATE VIEW accounting_record as
SELECT a.record_id, a.user_id, a.order_id, a.price, a.created_at,
       (SELECT s.service_id FROM services as s WHERE a.service_id = s.service_id LIMIT 1),
       (SELECT s.name FROM services as s WHERE a.service_id = s.service_id LIMIT 1)
    FROM accounting as a;